/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { GraphQLType } from "./components/graphql-schema-builder/types";
export { GraphQLType } from "./components/graphql-schema-builder/types";
export namespace Components {
    interface GraphqlSchemaBuilder {
        "externalEntities": { [key: string]: any[] };
        "schema": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface GraphqlSchemaBuilderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGraphqlSchemaBuilderElement;
}
declare global {
    interface HTMLGraphqlSchemaBuilderElementEventMap {
        "schemaChange": {
    types: GraphQLType[];
    schema: string;
  };
    }
    interface HTMLGraphqlSchemaBuilderElement extends Components.GraphqlSchemaBuilder, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGraphqlSchemaBuilderElementEventMap>(type: K, listener: (this: HTMLGraphqlSchemaBuilderElement, ev: GraphqlSchemaBuilderCustomEvent<HTMLGraphqlSchemaBuilderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGraphqlSchemaBuilderElementEventMap>(type: K, listener: (this: HTMLGraphqlSchemaBuilderElement, ev: GraphqlSchemaBuilderCustomEvent<HTMLGraphqlSchemaBuilderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGraphqlSchemaBuilderElement: {
        prototype: HTMLGraphqlSchemaBuilderElement;
        new (): HTMLGraphqlSchemaBuilderElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "graphql-schema-builder": HTMLGraphqlSchemaBuilderElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface GraphqlSchemaBuilder {
        "externalEntities"?: { [key: string]: any[] };
        "onSchemaChange"?: (event: GraphqlSchemaBuilderCustomEvent<{
    types: GraphQLType[];
    schema: string;
  }>) => void;
        "schema"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "graphql-schema-builder": GraphqlSchemaBuilder;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "graphql-schema-builder": LocalJSX.GraphqlSchemaBuilder & JSXBase.HTMLAttributes<HTMLGraphqlSchemaBuilderElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
